---
// This is the master template for all pages on the site.
import TopNav from '../components/top-nav.astro';
import Footer from '../components/footer.astro';
import Breadcrumb from '../components/breadcrumb.astro'; // 1. Import the Breadcrumb component

interface Props {
    title: string;
    description: string;
}
const { title, description } = Astro.props;

// 2. This new code automatically generates the breadcrumb links from the current URL
const currentUrlPath = Astro.url.pathname;
const pathParts = currentUrlPath.split('/').filter(part => part); // Remove empty parts

let cumulativePath = '';
const breadcrumbLinks = pathParts.map(part => {
    cumulativePath += `/${part}`;
    return {
        href: cumulativePath,
        // Capitalize the first letter and replace dashes for the label
        label: part.charAt(0).toUpperCase() + part.slice(1).replace(/-/g, ' ')
    };
});
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content={description}>
    <title>{title}</title>
    <link href="https://fonts.googleapis.com/css?family=Montserrat:700,900|Barlow:400,700|Anton&display=swap" rel="stylesheet">

    <style is:global>
        :root {
            /* YOUR NEW RED/BLACK PALETTE */
            --bg: #000000;
            --card: #210000;
            --accent-primary: #ff0000;
            --text-primary: #ffffff;
            --text-secondary: #a9a9b8;
            --border-color: #690000;

            --font-header: 'Montserrat', 'Anton', Arial, sans-serif;
            --font-body: 'Barlow', Arial, sans-serif;
            --transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        *, *::before, *::after {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--bg);
            color: var(--text-primary);
            font-family: var(--font-body);
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex: 1 0 auto;
        }

        a {
            color: var(--accent-primary);
            text-decoration: none;
            transition: color var(--transition);
        }

        a:hover {
            opacity: 0.8;
        }

        section {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 4rem 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease-out, transform 0.5s ease-out;
        }

        section.visible {
            opacity: 1;
            transform: translateY(0);
        }

        section h2 {
            font-family: var(--font-header);
            font-size: 2.25rem;
            color: var(--accent-primary); /* Section headers are now RED */
            margin-bottom: 2.5rem;
            text-align: center;
            letter-spacing: 1px;
        }
    </style>
</head>
<body>
    <TopNav />

    <main id="main-content" role="main">
        <div class="breadcrumb-container" style="max-width: 1200px; margin: 0 auto; padding: 1.5rem 1.5rem 0 1.5rem;">
            {/* 3. This line checks if the current page is NOT the homepage, and if so, renders the breadcrumb */}
            {currentUrlPath !== '/' && <Breadcrumb links={breadcrumbLinks} />}
        </div>
        <slot />
    </main>

    <Footer />

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sections = document.querySelectorAll('section');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            sections.forEach(sec => {
                observer.observe(sec);
            });
        });
    </script>
</body>
</html>